// Copyright 2015-2016 Kerbas_ad_astra <kerbas.ad.astra -at- liamg-reversed -dot- com>
//
// This file is part of AntennaRange Relays.
//
// AntennaRange Relays is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// AntennaRange Relays is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with AntennaRange Relays.  If not, see <http://www.gnu.org/licenses/>.

CONTRACT_TYPE
{
	name = AntennaRangeRelayInnerPlanet
	
	title = Place a relay satellite in orbit around @/targetBody1
	
	group = AntennaRangeRelays
	
	description = To support later exploration missions to @/targetBody1, we want to establish a communication network of satellites with enough transmitter power to reach all the way back to @/homeworld.  This will allow later missions to use smaller, less power-hungry antennas.  Since we've upgraded the tracking station, a Comms DTS-M1 should do the trick for @/targetBody1.
	
	synopsis = Place a communications relay in orbit around @/targetBody1.
	
	completedMessage = The relay is in position.  Now later missions to @/targetBody1 can use it instead of having to transmit all the way to @/homeworld!
	
	agent = ARR Relay Remuneration, Inc.
	
	targetBody = @/targetBody1
	
	rewardScience = 0
	rewardReputation = 30
	rewardFunds = 20000.0
	//This contract doesn't expire, but it can be declined (can't imagine why you would, since it's free money), so we need to define failure costs.
	failureReputation = 20
	failureFunds = 50000.0
	advanceFunds = 40000.0
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
	}
	
	DATA
	{
		type = CelestialBody
		homeworld = HomeWorld()
	}
	
	DATA
	{
		type = int
		maxApoapsis = 4000000 //Too much higher, and whip antennas won't be able to reach it efficiently.
	}
	
	//Here's the control logic: the body has to be a planet or moon (i.e. not a star) in the inner solar system (i.e. semi-major axis < 1.6x homeworld's), it must have fewer than 5 ships orbiting it (4 is the minimum to establish coverage, so let's give one more for redundancy, and if you have 5 ships, you probably have 5 antennas), and it cannot be the homeworld or one of the homeworld's children or parent (since the homeworld doesn't need a "network" and the homeworld's children and parents fall under a separate contract).
	
	DATA
	{
		type = List<CelestialBody>
		validBodies = AllBodies().Where(b =>  (  ((b.IsPlanet() && (b.SemiMajorAxis() < 1.6 * HomeWorld().SemiMajorAxis())) || (b.IsMoon() && (b.Parent().SemiMajorAxis() < 1.6 * HomeWorld().SemiMajorAxis() ) )) && !(b.IsHomeWorld() || b.Parent().IsHomeWorld() ) )   )
	}
	DATA
	{
		type = List<Vessel>
		bodyVessels = AllVessels().Where(v => @validBodies.Contains(v.CelestialBody()))
		orbitingVessels = @bodyVessels.Where(v => v.IsOrbiting())
		validVessels = @orbitingVessels.Where(v => v.Orbit().Apoapsis() < @/maxApoapsis)
	}
	DATA
	{
		type = CelestialBody
		targetBody1 = @validBodies.Where(b => (@validVessels.Where(v => (v.CelestialBody() == b)).Count() < 5)).Random()
	}
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		maxApA = @/maxApoapsis
		notes = Most of the orbit details are intentionally left open, but an inclined and elliptical orbit will give the best uptime, with the shortest periods of being "eclipsed" by the body.
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 0
		maxCrew = 0
	}
	
	PARAMETER
	{
		name = Antennas
		type = Any
		title = Include at least one of the following inner-planet-range antennas
	
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			part = mediumDishAntenna
		}
		
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			part = commDish
		}
		
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			part = HighGainAntenna
		}
	}
	
	REQUIREMENT
	{
		name = Escape
		type = Escape
		targetBody = @/homeworld
	}
	
	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 1
	}
	
	REQUIREMENT
	{
		name = PartUnlocked
		type = PartUnlocked
		part = mediumDishAntenna
	}
}